package main

import (
	"bytes"
	"fmt"
	"net/http"
	"sync"
)

const targetURL = "http://localhost:3000/claim/"

func claimToken(wg *sync.WaitGroup, token string) {
	defer wg.Done()
	_, err := http.Post(targetURL+token, "application/json", bytes.NewBuffer([]byte("{}")))
	if err != nil {
		fmt.Println("Error claiming token:", err)
	}
}

func main() {
	var wg sync.WaitGroup

	total := 1000
	for i := range total {
		wg.Add(1)
		if i < total/4 {
			go claimToken(&wg, "SOL")
		} else {
			go claimToken(&wg, "BTC")
		}
	}

	wg.Wait()

	resp, err := http.Get("http://localhost:3000/balance")
	if err != nil {
		fmt.Println("Error checking balance:", err)
		return
	}
	defer resp.Body.Close()

	var buffer bytes.Buffer
	_, err = buffer.ReadFrom(resp.Body)
	if err != nil {
		fmt.Println("Error reading balance response:", err)
		return
	}

	fmt.Printf("Final token balance: %s\n", buffer.String())
}
